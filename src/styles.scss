// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use "@angular/material" as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$dev-demo-primary: mat.define-palette(mat.$deep-purple-palette);
$dev-demo-accent: mat.define-palette(mat.$deep-orange-palette, 900);

$dev-demo-primary-dark: mat.define-palette(mat.$deep-purple-palette, 300);
$dev-demo-accent-dark: mat.define-palette(mat.$deep-orange-palette, 200);

// The warn palette is optional (defaults to red).
$dev-demo-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$dev-demo-theme: mat.define-light-theme(
  (
    color: (
      primary: $dev-demo-primary,
      accent: $dev-demo-accent,
      warn: $dev-demo-warn,
    ),
  )
);

$dev-demo-dark-theme: mat.define-dark-theme(
  (
    color: (
      primary: $dev-demo-primary-dark,
      accent: $dev-demo-accent-dark,
      warn: $dev-demo-warn,
    ),
  )
);
// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($dev-demo-theme);

.darkMode {
  @include mat.all-component-themes($dev-demo-dark-theme);
}

/* You can add global styles to this file, and also import other style files */

html,
body {
  height: 100%;
}
body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
  overflow: hidden;
}

.centered {
  padding: 0 1rem;
  margin: 1rem auto;
  height: 77%;
}

$colors: #6750a4, #b3261e, #7d5260, #e46962, #21005d, #31111d, #878f99;

.logo {
  color: #fff;
}

@for $i from 1 through length($colors) {
  .card:nth-child(#{length($colors)}n + #{$i}) {
    .logo {
      background: lighten(nth($colors, random(length($colors))), 0%);
    }
  }
}

.dialog .mat-dialog-container {
  height: auto;
  width: 100%;
  border-radius: 28px;
}

.cdk-overlay-pane.dialog {
  width: 90%;
  max-width: 100% !important;
}

@media only screen and (min-width: 600px) and (max-width: 904px) {
  .centered {
    width: 65%;
  }

  .bottom {
    width: 65%;
  }

  .cdk-overlay-pane.dialog {
    width: 60%;
  }
}

@media only screen and (min-width: 905px) and (max-width: 1239px) {
  .centered {
    width: 40%;
  }

  .bottom {
    width: 40%;
  }

  .cdk-overlay-pane.dialog {
    width: 40%;
  }
}

@media only screen and (min-width: 1240px) and (max-width: 1439px) {
  .centered {
    width: 30%;
  }

  .bottom {
    width: 30%;
  }

  .cdk-overlay-pane.dialog {
    width: 30%;
  }
}

@media only screen and (min-width: 1440px) {
  .centered {
    width: 25%;
  }

  .bottom {
    width: 25%;
  }

  .cdk-overlay-pane.dialog {
    width: 25%;
  }
}
